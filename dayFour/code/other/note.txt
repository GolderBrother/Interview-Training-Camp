
十大经典排序
https://www.cnblogs.com/onepixel/articles/7674659.html

进阶算法-Web前端开发中的经典算法：
https://ke.qq.com/webcourse/index.html#cid=474676&term_id=100568410&taid=4252429940375092&vid=5285890797230219283

玩数据库的对算法要求高点

1.数组去重的方法

(1)es6的方法 Set
const arr = [1,2,5,5,3,4,3];

const newArr = [...new Ser(arr)];
const newArr2 = Array.from(new Set(arr));

(2)循环查找重复项（操作一个数组）
a. 含当前项，就在原数组中把当前项干掉
splice删除会出现的问题：
原来数组改变，这样如果i继续++，则会产生数组塌陷
性能不好，当前项一旦删除，后面想索引都要变
所以删除完索引要-1 -> --i;

b. 不包含当前项的存入一个新数组(arr)中，要在堆内存中开辟一个新的内存，性能也不好

c. 包含当前项的值置为null/undefined，然后在使用filter过滤出非空元素就行
arr.filter(item => item != null);

d.不产生数组塌陷，数组元素索引不改变，删除第一项，就是把最后一项赋值给删除项，并删除最后一项。并且索引要减1, i--;
因为新替换的值还没开始比较，这样才能正常往后面走。

IE6 7 8不兼容数组的indexOf方法

数组indexOf和双循环一样的

(3)对象键值对
对象属性名相同的，后面的会覆盖前面的

那数组中的每项想新容器中存储，如果当前项之间有c存储过，说明是重复的，删掉当前项就行了

(4)先升序，相同项就紧挨着的，在相邻比较(冒泡)
ary.sort((a, b) => a - b);

join:数组按照规则拼接成字符串

\1*：表示出现0到多次前面匹配的子串(分组)
const reg = /(\d+@)\1*/g;

正则子串的捕获
ary.replace(reg, (val, group) => {

})

val: 大正则捕获的子串
group: 第一个组捕获的子串

是说具体思路，写方案，不是一直写代码

二十种实现方式：其实是某一类思想的多种实现(衍生)

2.排序算法
入门级排序：
冒泡排序
插入排序
快排排序

听的是思路，不是记住代码

(1)冒泡排序：
拿当前项和后一项对比，比它大，就交换位置

结果是每一轮比较后，当前数组中虽大的放到末尾

规律：一轮轮的比较，每一轮都从第一项开始，当前项A和后一项B进行比较，如果A>B,则元素A和B交换位置
最大轮数： arr.length - 1
每一轮次数：最多length-1次(不用和自己比)
还要把之前比较完的多少轮(i)减掉

let arr = [12, 8, 24, 16, 1];
for(let i = 0, len = arr.length - 1; i++) {
	for(let j = 0, j < len - i - 1; j++) {
		if(arr[j] > arr[j+1]) [arr[j], arr[j+1]] = [arr[j+1], arr[j]];
	}
}

(2)插入排序
抓扑克牌后排序，很最后一张牌比较，找个位置坐下
新抓的牌跟手中的牌进行比较，从后往前比，新抓的牌比手里的某张牌大了，则把当前牌放到手里某张牌的后面，反之放前面，依次比较
如果比到第一项，就直接把新牌放到第一项即可

(3)快速排序
类似二叉树的二分法，找出中间项，大的放中间项右边(放数组里面)，小的放中间项右边(放数组里面)，依次排序
没有就放空数组[]

同一个操作执行多次，不是循环就是递归
快速排序的性能最优

3.数组扁平化的N种实现方案
将多维数组转换成一维数组

(1)ES6的方法
数组原型上的方法Array.rpototypr.flat(n)
默认扁平化一级

扁平化无限级别
arr.flat(Infinity);

(2)使用正则把方括号去掉
const reg = /((\[)*)(\])*/g;
const arr = [1,[2,[3,[4,5,6,7,8]]],9];
arr.join().replace(reg, '');

(3)使用数组的join方法
[1,[2,[3,[4,5,6,7,8]]],9].join().split(",");

(4)reduce
const arr = [1,[2,[3,[4,5,6,7,8]]],9];
const getNewArr = arr => arr.reduce((prev, curr) => prev.concat(Array.isArray(curr) ? getNewArr(curr) : curr), []);
console.log(getNewArr(arr));

(5)转换为字符串

a. 使用toString方法
arr.toString().split(",").map(item => parseFloat(item));

b. JSON.stringify()
arr = JSON.stringify(arr).replace(/[\/|\/]/g, '').split(',').map(item => parseFloat(item));

(6)循环数组每一项处理,需要验证是否为数组
a. while(arr.some(item => Array.isArray(item))) {
  	// 只要是还有数组，就去一级(但是这种方式只能去一级)
	arr = [].concat(...arr);
}

b. ~function(){
 	function myFlat(){
	    let result = [],
		_this = this;
	    let fn = (arr) => {
		for(let i = 0, len = arr.length;i < len; i++) {
		    if(Array.inArray(arr[i])){
			fn(arr[i]);
			continue;
		    }
		    result.push(arr[i]);
		}
	    };
	    fn(_this);
	    return result;
	}
	Array.prototype.myFlat = myFlat;
}();

arr = arr.myFlat();

3. 阿里面试题之斐波那契数列(数据结构与算法)
前两项是1

实现思路：数组倒数第一项和倒数第二项之和，加到数组的最后面
F(n) = F(n - 1) + F(n - 2);

实现方法：
(1)function fibonacii(n){
    if(n <= 1) return 1;
    // 需要创建数组的默认值
    let arr = [1, 1];
    // 即将要创建多少个
    let i = n + 1 - 2;
    while(i > 0) {
	arr.push(arr[arr.length-2] + arr[arr.length-1]);
 	i--;
    }
    // 返回最后一项
    return arr[arr.length-1];
}

console.log(fibonacii(5));

(2)function fibonacii(count) {
    function fn(count, curr = 1, next = 1){
	if(count = 0) return curr;
    	// 每次循环后，将count-1,然后再将下一项(next)作为当前项，并更新下一项的值为当前项加上下一项
    	else return fn(count - 1, next, curr+next);
    }
    return fn(count);
}

好理解
(3)function fibonacii(n){
    if(n-2 >= 0) return fibonacii(n-2)+fibonacii(n-1);
    else return 1;
} 

4.字节跳动的一道算法题
1-9之间的任意数字,顺序组合、不重复、个数不限，加起来等于15的有哪些组合？

15 => 15 / 2 向上取整 -> 8,8后面的数值组合起来怎么加都是大于15的，所以不用考虑。因此只取中间值及其以下的数字组合。

1 5 
1 1+1 1+1+1 1+1+1+1 1+1+1+1+1

3 3
3 3+1 3+2

n m
n n+1 n+2 ... n+(m-1)

得出求和公式：
(N+(N+M-1))*M/2

求和 > 15 停时累加
 = 15 获取数组组合
 < 15 继续累加求和


脑子越不动越笨，多动动脑，让自己变得聪明点


https://ke.qq.com/webcourse/index.html#cid=474676&term_id=100568410&taid=4252429940375092&vid=5285890797230219283


